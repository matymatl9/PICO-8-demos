pico-8 cartridge // http://www.pico-8.com
version 43
__lua__
tile=8
w=12
h=12
xoff=16
yoff=16
col_floor=0

levels={}
cur=1
level=nil
player={x=2,y=2}
enemies={}
turns=0
enemy_timer=0
enemy_delay=5 

state="play"
transition_timer=0
next_level=1

function make_map_from_str(tbl)
 local m={}
 for y=1,h do
  m[y]={}
  local line=tbl[y]
  for x=1,w do
   local ch=sub(line,x,x)
   if ch=='#' then m[y][x]=1 else m[y][x]=0 end
   if ch=='e' then m[y][x]=2 end
  end
 end
 return m
end

local map_strs={
 {
  "############",
  "#p.........#",
  "#..#....#..#",
  "#..#....#..#",
  "#....##....#",
  "#....##....#",
  "#....##....#",
  "#....##....#",
  "#..#....#..#",
  "#..#....#..#",
  "#.........e#",
  "############",
 },
 {
  "############",
  "#p.........#",
  "#..........#",
  "#..##..##..#",
  "#..##..##..#",
  "#..........#",
  "#.##########",
  "#.##########",
  "#.##########",
  "#.##########",
  "#.........e#",
  "############",
 },
 {
  "############",
  "#p.....#####",
  "#...#..#####",
  "#.###......#",
  "#......#...#",
  "########...#",
  "#..........#",
  "#.##########",
  "#..........#",
  "#######.####",
  "#######...e#",
  "############",
 },
 {
  "############",
  "#p....#....#",
  "#..##.#.##.#",
  "#..##...##.#",
  "#.....####.#",
  "#..##.####.#",
  "#..##.####.#",
  "#.......##.#",
  "#..##.#.##.#",
  "#..##.#.##.#",
  "#####.#..#e#",
  "############",
 },
 {
  "############",
  "#p.........#",
  "#.###.######",
  "#.#...######",
  "#.#..#.....#",
  "#.#..#.#.#.#",
  "#....#.#...#",
  "#.#..#.##.##",
  "#.#..#.#...#",
  "#.#....#.#.#",
  "#....###..e#",
  "############",
 },
 {
  "############",
  "#p.........#",
  "##.#.##.#.##",
  "##.#.##.#.##",
  "#..........#",
  "##.#.##.#.##",
  "#..........#",
  "##.#.#######",
  "#..........#",
  "##.#.##.####",
  "#.........e#",
  "############",
 },
 -- level 7
 {
  "############",
  "#p.......#e#",
  "#.#......#.#",
  "#.......#..#",
  "#...#..#...#",
  "#.....#....#",
  "#.....#....#",
  "#...#..#...#",
  "#..#....#..#",
  "#.#......#.#",
  "#..........#",
  "############",
 },
 {
  "############",
  "#p..#.....e#",
  "#...#.######",
  "#...#...####",
  "#........###",
  "#..###...###",
  "#........###",
  "#..###...###",
  "#........###",
  "############",
  "############",
  "############",
 },
 {
  "############",
  "#...#...#e##",
  "#.#.#.#.#..#",
  "#.#.#.#.#.##",
  "#.#.#.#.#..#",
  "#.#.#.#.##.#",
  "#.#...#....#",
  "#.##########",
  "#..........#",
  "#.####.###.#",
  "#....p.....#",
  "############",
 }, 
 {
  "############",
  "#p.........#",
  "#......#...#",
  "#......#...#",
  "##..#....#.#",
  "#..........#",
  "#.....####.#",
  "#..#..#....#",
  "##........##",
  "#....########",
  "#.........e#",
  "############",
 }
}

for i=1,#map_strs do
 local m=make_map_from_str(map_strs[i])
 local lvl={map=m,enemies={}}
 for y=1,h do
  for x=1,w do
   local ch=sub(map_strs[i][y],x,x)
   if ch=='p' then lvl.player={x=x,y=y} end
   if ch=='e' then lvl.exit={x=x,y=y} end
  end
 end
 if i<=7 then
   add(lvl.enemies,{x=6,y=6,spr=1})
 elseif i<=9 then
   add(lvl.enemies,{x=6,y=6,spr=1})
   add(lvl.enemies,{x=8,y=8,spr=2})
 elseif i==10 then
   add(lvl.enemies,{x=5,y=5,spr=1})
   add(lvl.enemies,{x=7,y=7,spr=2})
   add(lvl.enemies,{x=9,y=9,spr=3})
 end
 add(levels,lvl)
end

function load_level(i)
 level=levels[i]
 cur=i
 player.x=level.player.x
 player.y=level.player.y
 enemies=fastcopy(level.enemies)
 turns=0
 enemy_timer=0
end

function fastcopy(t)
 local o={}
 for k,v in pairs(t) do
  if type(v)=="table" then o[k]=fastcopy(v) else o[k]=v end
 end
 return o
end

function is_wall(x,y)
 if x<1 or x>w or y<1 or y>h then return true end
 return level.map[y][x]==1
end

function try_move(pl,dx,dy)
 local nx,ny=pl.x+dx,pl.y+dy
 if not is_wall(nx,ny) then 
   pl.x,pl.y=nx,ny
   sfx(0) 
   return true
 end
 return false
end

function handle_input()
 local moved=false
 if btnp(0) then moved=try_move(player,-1,0) end
 if btnp(1) then moved=try_move(player,1,0) end
 if btnp(2) then moved=try_move(player,0,-1) end
 if btnp(3) then moved=try_move(player,0,1) end
 if moved then turns+=1 end
 check_exit()
end

function enemy_turns()
 for e in all(enemies) do
  local path=find_path(e.x,e.y,player.x,player.y)
  if path and #path>1 then
    local step=path[2]
    e.x=step.x
    e.y=step.y
  end
  if e.x==player.x and e.y==player.y then
    sfx(1)
    game_over()
  end
 end
end

function find_path(sx,sy,gx,gy)
 local q={{x=sx,y=sy}}
 local visited={}
 local parent={}
 visited[sy*100+sx]=true
 while #q>0 do
   local cur=q[1]
   deli(q,1)
   if cur.x==gx and cur.y==gy then
     local path={}
     local key=gy*100+gx
     while key do
       add(path,{x=cur.x,y=cur.y})
       local p=parent[key]
       if p then
         cur={x=p.x,y=p.y}
         key=p.key
       else
         key=nil
       end
     end
     for i=1,flr(#path/2) do
       path[i],path[#path-i+1]=path[#path-i+1],path[i]
     end
     return path
   end
   local dirs={{1,0},{-1,0},{0,1},{0,-1}}
   for d in all(dirs) do
     local nx=cur.x+d[1]
     local ny=cur.y+d[2]
     local nkey=ny*100+nx
     if not visited[nkey] and not is_wall(nx,ny) then
       visited[nkey]=true
       parent[nkey]={x=cur.x,y=cur.y,key=cur.y*100+cur.x}
       add(q,{x=nx,y=ny})
     end
   end
 end
 return nil
end

function check_exit()
 if player.x==level.exit.x and player.y==level.exit.y then
  next_level=cur+1
  if next_level>#levels then
    state="win"
    sfx(3)
  else
    state="transition"
    transition_timer=0
    sfx(2) 
  end
 end
end

function game_over()
 load_level(cur)
 state="play"
end

function _init()
 load_level(1)
end

function _update()
 if state=="play" then
   handle_input()
   enemy_timer+=1
   if enemy_timer>=enemy_delay then
    enemy_timer=0
    enemy_turns()
   end
 elseif state=="transition" then
   transition_timer+=1
   if transition_timer>60 then
     load_level(next_level)
     state="play"
   end
 elseif state=="win" then
   transition_timer+=1
   if transition_timer>180 then
     load_level(1)
     state="play"
   end
 end
end

function draw_tile(x,y)
 local sx=(x-1)*tile+xoff
 local sy=(y-1)*tile+yoff
 if level.map[y][x]==1 then
   spr(5,sx,sy) 
 else
   rectfill(sx,sy,sx+tile-1,sy+tile-1,col_floor)
 end
end

function _draw()
 cls()
 if state=="play" then
   for y=1,h do for x=1,w do draw_tile(x,y) end end
   spr(8,(level.exit.x-1)*tile+xoff,(level.exit.y-1)*tile+yoff)
   for e in all(enemies) do
     spr(e.spr,(e.x-1)*tile+xoff,(e.y-1)*tile+yoff)
   end
   spr(0,(player.x-1)*tile+xoff,(player.y-1)*tile+yoff)
   local hud="level:"..cur.."  turns:"..turns
   print(hud,64-#hud*2,120,7)
 elseif state=="transition" then
   local txt="level "..next_level
   print(txt,64-#txt*2,60,7)
 elseif state=="win" then
   print("you win!",64-24,60,11)
 end
end

__gfx__
0004444400bb330000bb330000bb3300000000000000000000000000000000005555555500000000000000000000000000000000000000000000000000000000
c00ccccc00b8380000b8380000b83800000000000444404444044440000000005444444500000000000000000000000000000000000000000000000000000000
0ccff72f00bb330000bb330000bb3300000000000444404444044440000000005444440500000000000000000000000000000000000000000000000000000000
000ffffeb0033003b0033003b0033003000000000000000000000000000000005444444500000000000000000000000000000000000000000000000000000000
0fccc0000bbb33300bbb33300bbb3330000000004404444044444044000000005004444500000000000000000000000000000000000000000000000000000000
000cc00000ba930000ba930000ba9300000000004404444044444044000000005404444500000000000000000000000000000000000000000000000000000000
0550500000ba933000ba933000ba9330000000000000000000000000000000005444440500000000000000000000000000000000000000000000000000000000
0000500000bb330000bb330000bb3300000000000444404444044440000000005444444500000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000444404444044440000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000004404444404444044000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000004404444404444044000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000444404444044440000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000444404444044440000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000009090000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000009090000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000050400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
00010000230001b000000000000000000000000000000000000000000000000000000000000000200302003020030000001c40000000000000000000000000000000000000000000000000000000000000000000
001000000c05005050000500000000000000000000000000000000000011000000000000000000000000000000000000000000000000000000160001600016000060000600006000060000000000000000000000
00140000255502b5502f55033550325503255032550235003650034500280002e5002750025500280002800025500255002800028000280002750028500000000000000000000000000000000000000000000000
0010000026750267502675026750317003070016750277001b75027700157501a7001b75026700157502670019750147001f7501870026750287502a7502c7502e7502f75032750347503675037750387503e750
